<!-- 这段程序是一个MyBatis的映射文件（Mapper），用于定义数据库查询语句和结果映射关系。它使用XML格式表示，包含了多个查询语句和结果映射的定义。

这个Mapper文件定义了与文章（Article）相关的数据库查询和结果映射。以下是该文件的主要部分：

1. 定义了四个结果映射（resultMap）：
   - articleHomeResultMap：用于映射主页展示的文章信息。
   - articlePreviewResultMap：用于映射文章预览信息。
   - articleResultMap：用于映射完整的文章信息。
   - articleBackResultMap：用于映射后台管理的文章信息。

2. 定义了多个查询语句（select）：
   - listArticles：查询文章列表，返回主页展示的文章信息。
   - listArticlesByCondition：根据条件查询文章列表，返回文章预览信息。
   - getArticleById：根据文章ID查询文章详情。
   - listArticleBacks：查询后台管理的文章列表，返回文章信息。
   - countArticleBacks：统计后台管理的文章数量。
   - listRecommendArticles：查询推荐的文章列表。
   - listArticleStatistics：查询文章统计信息。

每个查询语句都使用了不同的结果映射（resultMap），将数据库查询结果映射到对应的Java对象中。

这个Mapper文件的目的是通过定义查询语句和结果映射关系，提供了对文章数据的访问和操作接口。这样，程序就可以通过调用这些接口来查询、展示和管理文章数据。 -->

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.cuit.epoch.mapper.ArticleMapper">

    <resultMap id="articleHomeResultMap" type="org.cuit.epoch.dto.article.ArticleHomeDTO">
        <id column="id" property="id"/>
        <result column="article_cover" property="articleCover"/>
        <result column="article_title" property="articleTitle"/>
        <result column="article_content" property="articleContent"/>
        <result column="create_time" property="createTime"/>
        <result column="type" property="type"/>
        <result column="is_top" property="isTop"/>
        <result column="category_id" property="categoryId"/>
        <result column="category_name" property="categoryName"/>
        <collection property="tagDTOList" ofType="org.cuit.epoch.dto.tag.TagDTO">
            <id column="tag_id" property="id"/>
            <result column="tag_name" property="tagName"/>
        </collection>
    </resultMap>

    <resultMap id="articlePreviewResultMap" type="org.cuit.epoch.dto.article.ArticlePreviewDTO">
        <id column="id" property="id"/>
        <result column="article_cover" property="articleCover"/>
        <result column="article_title" property="articleTitle"/>
        <result column="create_time" property="createTime"/>
        <result column="category_id" property="categoryId"/>
        <result column="category_name" property="categoryName"/>
        <collection property="tagDTOList" ofType="org.cuit.epoch.dto.tag.TagDTO">
            <id column="tag_id" property="id"/>
            <result column="tag_name" property="tagName"/>
        </collection>
    </resultMap>

    <resultMap id="articleResultMap" type="org.cuit.epoch.dto.article.ArticleDTO">
        <id column="id" property="id"/>
        <result column="article_cover" property="articleCover"/>
        <result column="article_title" property="articleTitle"/>
        <result column="article_content" property="articleContent"/>
        <result column="type" property="type"/>
        <result column="original_url" property="originalUrl"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
        <result column="category_id" property="categoryId"/>
        <result column="category_name" property="categoryName"/>
        <collection property="tagDTOList" ofType="org.cuit.epoch.dto.tag.TagDTO">
            <id column="tag_id" property="id"/>
            <result column="tag_name" property="tagName"/>
        </collection>
    </resultMap>

    <resultMap id="articleBackResultMap" type="org.cuit.epoch.dto.article.ArticleBackDTO">
        <id column="id" property="id"/>
        <result column="article_cover" property="articleCover"/>
        <result column="article_title" property="articleTitle"/>
        <result column="create_time" property="createTime"/>
        <result column="type" property="type"/>
        <result column="is_top" property="isTop"/>
        <result column="is_delete" property="isDelete"/>
        <result column="status" property="status"/>
        <result column="category_name" property="categoryName"/>
        <collection property="tagDTOList" ofType="org.cuit.epoch.dto.tag.TagDTO">
            <id column="tag_id" property="id"/>
            <result column="tag_name" property="tagName"/>
        </collection>
    </resultMap>

    <select id="listArticles" resultMap="articleHomeResultMap">
        SELECT a.id,
               article_cover,
               article_title,
               SUBSTR(article_content, 1, 500) AS article_content,
               a.create_time,
               a.type,
               a.is_top,
               a.category_id,
               category_name,
               t.id                            AS tag_id,
               t.tag_name
        FROM (SELECT id,
                     article_cover,
                     article_title,
                     article_content,
                     type,
                     is_top,
                     create_time,
                     category_id
              FROM tb_article
              WHERE is_delete = 0
                AND status = 1
              ORDER BY is_top DESC,
                       id DESC
                  LIMIT #{current}, #{size}) a
                 JOIN tb_category c ON a.category_id = c.id
                 JOIN tb_article_tag atg ON a.id = atg.article_id
                 JOIN tb_tag t ON t.id = atg.tag_id
        ORDER BY a.is_top DESC,
                 a.id DESC
    </select>

    <select id="listArticlesByCondition" resultMap="articlePreviewResultMap">
        SELECT
        a.id,
        article_cover,
        article_title,
        a.create_time,
        a.category_id,
        category_name,
        t.id AS tag_id,
        t.tag_name
        FROM
        (
        SELECT
        id,
        article_cover,
        article_title,
        article_content,
        create_time,
        category_id
        FROM
        tb_article
        <where>
            <if test="condition.categoryId != null">
                category_id = #{condition.categoryId}
            </if>
            <if test="condition.tagId != null">
                id IN (
                SELECT
                article_id
                FROM
                tb_article_tag
                WHERE
                tag_id = #{condition.tagId})
            </if>
        </where>
        AND is_delete = 0
        AND status = 1
        ORDER BY id DESC
        LIMIT #{current},#{size}
        ) a
        JOIN tb_category c ON a.category_id = c.id
        JOIN tb_article_tag atg ON a.id = atg.article_id
        JOIN tb_tag t ON t.id = atg.tag_id
    </select>

    <select id="getArticleById" resultMap="articleResultMap">
         SELECT
         a.id,
         article_cover,
         article_title,
         article_content,
         a.type,
         a.original_url,
         a.create_time,
         a.update_time,
         a.category_id,
         category_name,
         t.id AS tag_id,
         t.tag_name
         FROM
         tb_article a
         JOIN tb_category c ON a.category_id = c.id
         JOIN tb_article_tag atg ON a.id = atg.article_id
         JOIN tb_tag t ON t.id = atg.tag_id
         WHERE
         a.id = #{articleId}
         AND a.is_delete = 0
         AND a.status = 1
	</select>

    <select id="listArticleBacks" resultMap="articleBackResultMap">
        SELECT
        a.id,
        article_cover,
        article_title,
        type,
        is_top,
        a.is_delete,
        a.status,
        a.create_time,
        category_name,
        t.id AS tag_id,
        t.tag_name
        FROM
        (
        SELECT
        id,
        article_cover,
        article_title,
        type,
        is_top,
        is_delete,
        status,
        create_time,
        category_id
        FROM
        tb_article
        <where>
            is_delete = #{condition.isDelete}
            <if test="condition.keywords != null">
                and article_title like concat('%',#{condition.keywords},'%')
            </if>
            <if test="condition.status != null">
                and status = #{condition.status}
            </if>
            <if test="condition.categoryId != null">
                and category_id = #{condition.categoryId}
            </if>
            <if test="condition.type != null">
                and type = #{condition.type}
            </if>
            <if test="condition.tagId != null">
                and id in
                 (
                  SELECT
                    article_id
                  FROM
                    tb_article_tag
                  WHERE
                    tag_id = #{condition.tagId}
                 )
            </if>
        </where>
        ORDER BY
          is_top DESC,
          id DESC
        LIMIT #{current},#{size}
        ) a
        LEFT JOIN tb_category c ON a.category_id = c.id
        LEFT JOIN tb_article_tag atg ON a.id = atg.article_id
        LEFT JOIN tb_tag t ON t.id = atg.tag_id
        ORDER BY
          is_top DESC,
          a.id DESC
    </select>

    <select id="countArticleBacks" resultType="java.lang.Integer">
        SELECT
        count(DISTINCT a.id)
        from
        tb_article a
        LEFT JOIN tb_article_tag tat on  a.id = tat.article_id
        <where>
            is_delete = #{condition.isDelete}
            <if test="condition.keywords != null">
                and article_title like concat('%',#{condition.keywords},'%')
            </if>
            <if test="condition.status != null">
                and `status` = #{condition.status}
            </if>
            <if test="condition.categoryId != null">
                and category_id = #{condition.categoryId}
            </if>
            <if test="condition.type != null">
                and type = #{condition.type}
            </if>
            <if test="condition.tagId != null">
                and tat.tag_id = #{condition.tagId}
            </if>
        </where>
    </select>


    <select id="listRecommendArticles" resultType="org.cuit.epoch.dto.article.ArticleRecommendDTO">
        SELECT
          id,
          article_title,
          article_cover,
          create_time
        FROM
            (
              SELECT DISTINCT
                article_id
                FROM
                 ( SELECT tag_id FROM tb_article_tag WHERE article_id = #{articleId} ) t
                 JOIN tb_article_tag t1 ON t.tag_id = t1.tag_id
                 WHERE
                 article_id != #{articleId}
            ) t2
               JOIN tb_article a ON t2.article_id = a.id
           WHERE a.is_delete = 0
           ORDER BY
           is_top DESC,id DESC
           LIMIT 6
    </select>

    <select id="listArticleStatistics" resultType="org.cuit.epoch.dto.article.ArticleStatisticsDTO">
        SELECT
            DATE_FORMAT( create_time, "%Y-%m-%d" ) AS date,
            COUNT( 1 ) AS count
        FROM
            tb_article
        GROUP BY
            date
        ORDER BY
            date DESC
    </select>

</mapper>
